vim.keymap.set("n", "-", "<CMD>lua MiniFiles.open()<CR>", { desc = "Open parent directory" })
vim.keymap.set("n", "<leader>-", "<CMD>lua MiniFiles.open(vim.api.nvim_buf_get_name(0))<CR>", { desc = "Open parent directory" })
vim.keymap.set("n", "<leader>e", "<CMD>e<CR>", { desc = "Open parent directory" })
vim.keymap.set("n", "<Esc>", "<CMD>nohlsearch<CR>")
vim.keymap.set("n", "<S-h>", "<CMD>bp<CR>", { desc = "Jump to previous buffer" })
vim.keymap.set("n", "<S-l>", "<CMD>bn<CR>", { desc = "Jump to next buffer" })
vim.keymap.set("n", "<leader><leader>", "<CMD>Pick buffers<CR>", { desc = "Show buffers" })
vim.keymap.set("n", "<leader>bd", "<CMD>bd<CR>", { desc = "Delete current buffer" })
vim.keymap.set("n", "<C-c>", "<CMD>bd<CR>", { desc = "Delete current buffer" })
vim.keymap.set("n", "<leader>d", "<CMD>lua vim.diagnostic.open_float()<CR>", { noremap = true, silent = true })
vim.keymap.set("n", "<leader>pgq", "ggVGgq<C-o><C-o>", { desc = "format" })
vim.keymap.set("n", "<leader>q", "<CMD>bufdo bd<CR>", { desc = "Delete all buffers" })
vim.keymap.set("n", "<leader>sf", "<CMD>Pick files<CR>", { desc = "Pick files" })
vim.keymap.set("n", "<leader>sg", "<CMD>Pick grep<CR>", { desc = "Pick grep" })
vim.keymap.set("n", "<leader>sk", "<CMD>Pick keymaps<CR>", { desc = "Pick keymaps" })
vim.keymap.set("n", "<leader>sd", "<CMD>Pick diagnostic<CR>", { desc = "Pick diagnostic" })
vim.keymap.set("n", "<leader>ss", "<CMD>Pick spellsuggest<CR>", { desc = "Pick spell suggest" })
vim.keymap.set("n", "<leader>w", "<CMD>write<CR>", { desc = "Write" })
vim.keymap.set("v", "<", "<gv", { noremap = true, silent = true })
vim.keymap.set("v", ">", ">gv", { noremap = true, silent = true })
vim.keymap.set("n", "<leader>gsc", "<cmd>lua MiniGit.show_at_cursor()<CR>", { desc = "Show Git related data at cursor" })
vim.keymap.set("n", "<leader>gsr", "<cmd>lua MiniGit.show_range_history()<CR>",
    { desc = "Shows how certain line range evolve" })
vim.keymap.set("n", "<leader>gsd", "<cmd>lua MiniGit.show_diff_source()<CR>",
    { desc = "Shows file state as it was at diff entry" })
vim.keymap.set({ "n", "x" }, "grf", "<cmd>lua vim.lsp.buf.format({async = true})<cr>", opts)
vim.keymap.set({ "n" }, "<leader>du", "<cmd>lua MiniDeps.update()<cr>", opts)
vim.keymap.set({ "n" }, "grd", "<CMD>lua vim.lsp.buf.declaration()<CR>")
vim.keymap.set({ "n" }, "gd", "<CMD>lua vim.lsp.buf.definition()<CR>")

vim.keymap.set('i', '<C-f>', 'copilot#Accept("\\<CR>")', { expr = true, replace_keycodes = false })
vim.keymap.set('i', '<C-w>', '<Plug>(copilot-accept-word)')
vim.keymap.set('i', '<C-g>', '<Plug>(copilot-suggest)')
vim.keymap.set('i', '<C-r', '<Plug>(copilot-accept-line)')
vim.keymap.set('i', '<C-d>', '<Plug>(copilot-dismiss)')

vim.keymap.set("n", "<leader>ce", function()
  vim.cmd("Copilot enable")
  vim.notify("GitHub Copilot enabled", vim.log.levels.INFO, {title = "Copilot"})
end, {desc = "Enable Copilot"})

-- Disable Copilot and announce it
vim.keymap.set("n", "<leader>cd", function()
  vim.cmd("Copilot disable")
  vim.notify("GitHub Copilot disabled", vim.log.levels.WARN, {title = "Copilot"})
end, {desc = "Disable Copilot"})
